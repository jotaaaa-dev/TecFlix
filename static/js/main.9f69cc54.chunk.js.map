{"version":3,"sources":["Tmdb.js","images/erro.jpg","components/LinhaDeFilme/index.js","components/FilmeDestaque/index.js","components/Cabecalho/index.js","App.js","index.js"],"names":["API_KEY","process","concUrl","endpoint","a","fetch","req","json","console","log","getHomeList","slug","titulo","items","getInfoFilme","movieId","type","info","title","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","largLista","results","length","marginLeft","width","map","item","key","poster_path","src","alt","original_title","erro","dataLanc","Date","first_air_date","generos","i","genres","push","name","sinopse","overview","lenght","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","fundo","listaFilme","setlistaFilme","dadosDestaque","setDadosDestaque","fundoCabecalho","setFundoCabecalho","useEffect","Tmdb","list","originais","filter","escolhaAleatoria","floor","random","escolhido","infoEscolhido","carregarTudo","scrollCheck","scrollY","addEventListener","removeEventListener","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAAMA,G,MAAUC,oCAiBNC,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACEC,MAAM,GAAD,OAjBV,gCAiBU,OAAeF,IADtB,cACVG,EADU,gBAEGA,EAAIC,OAFP,cAEVA,EAFU,OAGhBC,QAAQC,IAAIF,GAHI,kBAITA,GAJS,2CAAH,sDAQF,GACXG,YAAY,WAAD,4BAAE,sBAAAN,EAAA,sEAKYF,EAAQ,wDAAD,OAAyDF,IAL5E,gCAGDW,KAAM,YACNC,OAAQ,uBACRC,MALC,eAWYX,EAAQ,6CAAD,OAA8CF,IAXjE,gCASDW,KAAM,eACNC,OAAQ,4BACRC,MAXC,gBAiBYX,EAAQ,4CAAD,OAA6CF,IAjBhE,iCAeDW,KAAM,OACNC,OAAQ,UACRC,MAjBC,gBAuBYX,EAAQ,yDAAD,OAA0DF,IAvB7E,iCAqBDW,KAAM,OACNC,OAAQ,aACRC,MAvBC,gBA6BYX,EAAQ,yDAAD,OAA0DF,IA7B7E,iCA2BDW,KAAM,UACNC,OAAQ,aACRC,MA7BC,gBAmCYX,EAAQ,yDAAD,OAA0DF,IAnC7E,mCAiCDW,KAAM,SACNC,OAAQ,SACRC,MAnCC,iBAyCYX,EAAQ,4DAAD,OAA6DF,IAzChF,mCAuCDW,KAAM,UACNC,OAAQ,UACRC,MAzCC,iBA+CYX,EAAQ,yDAAD,OAA0DF,IA/C7E,mCA6CDW,KAAM,eACNC,OAAQ,mBACRC,MA/CC,mHAAF,kDAAC,GAuDZC,aAAY,uCAAG,WAAOC,EAASC,GAAhB,eAAAZ,EAAA,yDACPa,EAAO,IACRF,EAFQ,sBAGAC,EAHA,OAIE,UAJF,OAOG,OAPH,uCAKcd,EAAQ,UAAD,OAAWa,EAAX,mCAA6Cf,IALlE,cAKCiB,EALD,oDAQcf,EAAQ,OAAD,OAAQa,EAAR,mCAA0Cf,IAR/D,eAQCiB,EARD,2CAYCA,EAAO,KAZR,sDAiBHA,GAjBG,4CAAH,yDCjFD,G,MAAA,IAA0B,kC,yCCO1B,cAAqB,IAAnBC,EAAkB,EAAlBA,MAAOL,EAAW,EAAXA,MAAW,EACDM,mBAAS,GADR,mBACxBC,EADwB,KACfC,EADe,KAsB/B,OAEI,cADA,CACA,OAAKC,UAAU,gBAAf,UAEI,6BAAKJ,IACL,qBAAKI,UAAU,yBAAyBC,QAvBtB,WACtB,IAAIC,EAAIJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAa,GAC9CJ,EAAI,IACHA,EAAG,GAEPH,EAAWG,IAkBP,SACI,cAAC,IAAD,CAAeK,MAAO,CAACC,SAAU,QAErC,qBAAKR,UAAU,wBAAwBC,QAjBtB,WACrB,IAAIC,EAAIJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAa,GAC7CG,EAAmC,IAAvBlB,EAAMmB,QAAQC,OAC1BN,OAAOC,WAAaG,EAAaP,IACjCA,EAAKG,OAAOC,WAAaG,EAAa,IAE1CV,EAAWG,IAWP,SACI,cAAC,IAAD,CAAgBK,MAAO,CAACC,SAAU,QAGtC,qBAAKR,UAAU,6BAAf,SACI,qBAAKA,UAAU,uBAAuBO,MAAO,CACzCK,WAAYd,EACZe,MAA8B,IAAvBtB,EAAMmB,QAAQC,QAFzB,SAKCpB,EAAMmB,QAAQC,OAAS,GAAKpB,EAAMmB,QAAQI,KAAI,SAACC,EAAMC,GAAP,OAExC,qBAAehB,UAAU,sBAAzB,SAIMe,EAAKE,YACL,qBAAKC,IAAG,yCAAoCH,EAAKE,aAAerB,MAAOmB,EAAKnB,MAAOuB,IAAK5B,EAAM6B,iBAC9F,qBAAKF,IAAKG,EAAMzB,MAAQ,8BAAyBuB,IAAK,iCANlDH,cC9ClB,G,MAAA,YAAa,IAAXD,EAAU,EAAVA,KAITO,EAAW,IAAIC,KAAKR,EAAKS,gBAEzBC,EAAU,GAEd,IAAI,IAAIC,KAAKX,EAAKY,OACdF,EAAQG,KAAMb,EAAKY,OAAOD,GAAGG,MAIjC,IAAIC,EAAUf,EAAKgB,SAOnB,OAJGD,EAAQE,OAAS,MAChBF,EAAUA,EAAQG,UAAU,EAAG,KAAK,OAKpC,aADA,CACA,WAASjC,UAAW,WAAWO,MAAO,CAClC2B,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAgB,0CAAD,OAA4CrB,EAAKsB,cAAjD,MAHnB,SAOI,qBAAKrC,UAAU,qBAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,iBAAf,SAAiCe,EAAKuB,gBACtC,qBAAKtC,UAAU,mBACf,sBAAKA,UAAU,mBAAf,UAAmCe,EAAKwB,aAAxC,aACA,qBAAKvC,UAAU,gBAAf,SAAgCsB,EAASkB,gBACzC,sBAAKxC,UAAU,iBAAf,UAAiCe,EAAK0B,kBAAtC,aAA8F,IAA3B1B,EAAK0B,kBAA0B,IAAM,MACxG,qBAAKzC,UAAU,oBAAf,SAAoCe,EAAKgB,WACzC,sBAAK/B,UAAU,mBAAf,UACI,mBAAG0C,KAAI,iBAAY3B,EAAK4B,IAAK3C,UAAW,0BAAxC,6BACA,mBAAG0C,KAAI,oBAAe3B,EAAK4B,IAAK3C,UAAW,uBAA3C,8BAEJ,sBAAKA,UAAU,oBAAf,UAAmC,iDAAnC,IAA8DyB,EAAQmB,KAAK,kBCzChF,G,MAAA,YAAc,IAAZC,EAAW,EAAXA,MAEb,OACI,yBAAQ7C,UAAW6C,EAAQ,QAAU,GAArC,UACI,qBAAK7C,UAAU,kBAAf,SACI,mBAAG0C,KAAK,IAAR,SACI,qBAAKxB,IAAI,6EAA6EC,IAAI,gBAGlG,qBAAKnB,UAAU,qBAAf,SACI,mBAAG0C,KAAK,IAAR,SACI,qBAAKxB,IAAI,yEAAyEC,IAAI,wBCN3F,aAAM,MAGiBtB,mBAAU,IAH3B,mBAGZiD,EAHY,KAGAC,EAHA,OAKuBlD,mBAAS,MALhC,mBAKZmD,EALY,KAKGC,EALH,OAOyBpD,oBAAS,GAPlC,mBAOZqD,EAPY,KAOIC,EAPJ,KA+CnB,OAtCAC,qBAAU,YACU,uCAAG,oCAAAtE,EAAA,sEAEFuE,EAAKjE,cAFH,cAEfkE,EAFe,OAGnBP,EAAcO,GAGVC,EAAYD,EAAKE,QAAO,SAAA9B,GAAC,MAAa,cAAXA,EAAErC,QAC7BoE,EAAmBtD,KAAKuD,MAAMvD,KAAKwD,UAAYJ,EAAU,GAAGhE,MAAMmB,QAAQC,OAAS,IACnFiD,EAAYL,EAAU,GAAGhE,MAAMmB,QAAQ+C,GARxB,SASOJ,EAAK7D,aAAaoE,EAAUjB,GAAI,MATvC,OASfkB,EATe,OAUnBZ,EAAiBY,GAVE,4CAAH,qDAclBC,KACC,IAKHV,qBAAU,WACR,IAAMW,EAAc,WACf1D,OAAO2D,QAAU,GAClBb,GAAkB,GAElBA,GAAkB,IAItB,OADA9C,OAAO4D,iBAAiB,SAAUF,GAC3B,WACP1D,OAAO6D,oBAAoB,SAAUH,MAEpC,IAMD,sBAAK/D,UAAU,OAAf,UAEE,cAAC,EAAD,CAAW6C,MAAOK,IAEjBF,GACC,cAAC,EAAD,CAAejC,KAAMiC,IAGvB,yBAAShD,UAAU,SAAnB,SACG8C,EAAWhC,KAAI,SAACC,EAAMC,GAAP,OACd,cAAC,EAAD,CAAwBpB,MAAOmB,EAAKzB,OAAQC,MAAOwB,EAAKxB,OAArCyB,QAIvB,gDACY,sBAAMmD,KAAK,MAAMC,aAAW,gBAA5B,0BADZ,sBAC8E,uBAD9E,kCAEiC,uBAFjC,0CAMCtB,EAAWnC,QAAU,GACtB,qBAAKX,UAAU,aAAf,SACE,qBAAKkB,IAAI,wFAAwFC,IAAI,qBC1E7GkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f69cc54.chunk.js","sourcesContent":["const API_KEY = process.env.REACT_APP_APIKEY\nconst API_BASE = 'https://api.themoviedb.org/3';\n\n/*\nTítulos na página inicial do programa\n\n- Originais da Netflix\n- Recomendados (Trending)\n- Em alta (Top rated)\n- Ação\n- Comédia\n- Terror\n- Romance\n- Documentários\n*/\n\n/* Função para concatenar a url */\n    const concUrl = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    console.log(json)\n    return json;\n}\n\n// eslint-disable-next-line\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originais',\n                titulo: 'Originais do Tecflix',\n                items: await concUrl(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`) \n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados originais da \"NETFLIX\" */\n            },\n            {\n                slug: 'recomendados',\n                titulo: \"Recomendados para você\",\n                items: await concUrl(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados recomendados para você, relacionados aos filmes que você avaliou positivamente */\n            },\n            {\n                slug: 'alta',\n                titulo: \"Em Alta\",\n                items: await concUrl(`/movie/top_rated?&language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados mais assistidos do aplicativo */\n            },\n            {\n                slug: 'acao',\n                titulo: \"Ação\",\n                items: await concUrl(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados de ação */\n            },\n            {\n                slug: 'comedia',\n                titulo: \"Comédia\",\n                items: await concUrl(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados de comédia */\n            },\n            {\n                slug: 'terror',\n                titulo: \"Terror\",\n                items: await concUrl(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados de terror */\n            },\n            {\n                slug: 'romance',\n                titulo: \"Romance\",\n                items: await concUrl(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados de romance */\n            },            \n            {\n                slug: 'documentario',\n                titulo: \"Documentários\",\n                items: await concUrl(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n                /* Uso da função de concatenar a URL para encontrar os filmes e seriados sobre documentários */\n            }\n        ];\n    },\n\n// Função para pegar informação do filme para utilizar na area de Destaque\n\n    getInfoFilme : async (movieId, type) =>{\n        let info = {};\n        if(movieId) {\n            switch(type){\n                case 'movie':\n                    info = await concUrl(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`); // Decisão a tomar em caso de filmes\n                break;\n                 case 'tv':\n                    info = await concUrl(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);   // Decisão a tomar em caso de séries\n                break;\n                default:        /* Neste projeto não existe uso para a função default, pois na escolha do filme DESTAQUE, não existe \n                                a possibilidade de ele escolher alguma coisa que não seja nem um filme e nem uma série*/\n                    info = null;\n                break;\n            }\n        }\n\n         return info;\n     \n    }\n\n}","export default __webpack_public_path__ + \"static/media/erro.ec418784.jpg\";","import React, { useState }from 'react';\nimport './Linhadefilme.css';\nimport erro from '../../images/erro.jpg'\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\n\n// eslint-disable-next-line\nexport default ({title, items}) => {\n    const [scrollX, setScrollX] = useState(0)\n\n/* Função matemática para mover as listas para a esquerda */\n    const moverSetaEsquerda = () => {\n        let x = scrollX + Math.round(window.innerWidth / 2);\n        if(x > 0) {\n            x= 0;\n        }\n        setScrollX(x);\n    }\n\n/* Função matemática para mover as listas para a direita */\n    const moverSetaDireita = () => {\n        let x = scrollX - Math.round(window.innerWidth / 2);\n        let largLista = items.results.length * 150;\n        if((window.innerWidth - largLista) > x){\n            x = (window.innerWidth - largLista) - 60;\n        }\n        setScrollX(x);\n    }\n\n    return (\n        /* Disposição das listas dos filmes e das setas de movimento */\n        <div className=\"linhasDeFilme\">\n\n            <h2>{title}</h2>\n            <div className=\"linhaDeFilme--esquerda\" onClick={moverSetaEsquerda}>\n                <ArrowLeftIcon style={{fontSize: 50}}/>\n            </div>\n            <div className=\"linhaDeFilme--direita\" onClick={moverSetaDireita}>\n                <ArrowRightIcon style={{fontSize: 50}}/>\n            </div>\n           \n            <div className=\"linhasDeFilme--areaDaLista\">\n                <div className=\"linhasDeFilme--lista\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>     \n               {/* Comando para olhar na lista de itens e se tiver algum filme para mostrar ele vai mapear esses filmes*/}\n                {items.results.length > 0 && items.results.map((item, key)=>(               \n                       \n                       <div key={key} className=\"linhasDeFilme--item\">  \n\n                           {/* Comando para mostrar a capa do filme, a capa se encontra no \"poster_path\", porém ele não vem com a URL completa por ser dinamica,\n                            com isso foi montado a url pra obter essas imagens complementado pelo conteudo da \"poster_path\" */}\n                            {item.poster_path \n                           ? <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} title={item.title} alt={items.original_title}/>\n                           : <img src={erro} title ={'Imagem não disponível'} alt={'Imagem não disponível'}/>\n                            }\n                       </div>\n                    ))}                     \n                </div>                   \n            </div>            \n        </div>\n   );\n}","import React from 'react';\nimport './FilmeDestaque.css';\n// eslint-disable-next-line\nexport default ({item}) => {\n\n\n    /* Uso de uma função do javascript para definir a data de lançamento */\n    let dataLanc = new Date(item.first_air_date);\n    /* Váriavel para guardar os gêneros da API */\n    let generos = [];\n    /* Estrutura de repetição para pegar todos os gêneros da API */\n    for(let i in item.genres) {\n        generos.push( item.genres[i].name );\n    }\n\n    /* Váriavel para guardar a sinopse da API */\n    let sinopse = item.overview;\n    /* Função if (se) para interpretar se a sinopse daquele filme tem mais de 200 caractéres, caso tiver, cortar o \n    conteúdo no máximo de caractéres e concatenar a substring \"...\" */\n    if(sinopse.lenght > 200) {\n        sinopse = sinopse.substring(0, 200)+'...'\n    }\n    \n    return (\n        /* Seção para trazer a imagem do fundo (backdrop_path) da série ou filme em destaque */\n        <section className= \"destaque\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n\n        /* Definição da disposição dos itens na área do destaque */\n        }}>\n            <div className=\"destaque--vertical\">\n                <div className=\"destaque--horizontal\">\n                    <div className=\"destaque--nome\">{item.original_name}</div>\n                    <div className=\"destaque--info\"></div>\n                    <div className=\"destaque--pontos\">{item.vote_average} pontos</div>\n                    <div className=\"destaque--ano\">{dataLanc.getFullYear()}</div>\n                    <div className=\"destaque--temp\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                    <div className=\"destaque--sinopse\">{item.overview}</div>\n                    <div className=\"destaque--botoes\">\n                        <a href={`/watch/${item.id}`}className =\"destaque--botaoassistir\">► Assistir</a>\n                        <a href={`/list/add/${item.id}`}className =\"destaque--botaolista\">+ Minha Lista</a>\n                    </div>\n                    <div className=\"destaque--generos\"><strong>Gêneros:</strong> {generos.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    )\n}\n","import React from 'react';\nimport './Cabecalho.css';\n// eslint-disable-next-line\nexport default ({fundo}) => {\n    /* Inserção dos ícones do logo e do usuário na parte superior da página, cabeçalho (header) */\n    return (\n        <header className={fundo ? 'fundo' : ''}>\n            <div className=\"cabecalho--logo\">\n                <a href=\"/\">\n                    <img src=\"https://fontmeme.com/permalink/210401/f169c0f457a32ebf164ad097ff942706.png\" alt=\"Tecflix\"/>\n                </a>\n            </div>\n            <div className=\"cabecalho--usuario\">\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Usuário\"/>\n                </a>\n            </div>\n        </header>\n    )\n}","import React, { useEffect , useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport Linhadefilme from './components/LinhaDeFilme';\nimport FilmeDestaque from './components/FilmeDestaque';\nimport Cabecalho from './components/Cabecalho/';\n\n// eslint-disable-next-line\nexport default () => {\n\n  /* Definição da váriavel de lista de filme, que será utilizada para exibir todas as listas de filme na página principal */\n  const [listaFilme, setlistaFilme] = useState ([]);\n  /* Definição da váriavel de dados do filme destaque, que será exibido também na página inicial mas separadamente dos outros filmes, como um destaque */\n  const [dadosDestaque, setDadosDestaque] = useState(null);\n  /* Definição da váriavel da cor do fundo do cabeçalho (header), utilizada no momento da rolagem pela página, com a função de aparecer e desaparecer */\n  const [fundoCabecalho, setFundoCabecalho] = useState(false);\n\n  useEffect(()=>{\n    const carregarTudo = async () => {\n      // Pegando a lista total dos filmes da página principal\n      let list = await Tmdb.getHomeList();\n      setlistaFilme(list);\n\n      // Pegando o Destaque\n      let originais = list.filter(i=>i.slug === 'originais');\n      let escolhaAleatoria = Math.floor(Math.random() * (originais[0].items.results.length - 1));\n      let escolhido = originais[0].items.results[escolhaAleatoria]\n      let infoEscolhido = await Tmdb.getInfoFilme(escolhido.id, 'tv');\n      setDadosDestaque(infoEscolhido);\n      /* Nesta parte temos uma função matemática para escolher aleatóriamente um filme da lista de originais da TECFLIX (NETFLIX) e assim mostrá-lo no destaque da página */\n    }\n\n    carregarTudo();\n  }, []);\n  \n  /* O uso do hook \"useEffect\" nesta situação serve para perceber um ação dentro da página, que no caso é a ação de rolagem da página.\n     Assim sua funcionalidade é que quando ele percebe esta rolagem da página, ativa-se ou desativa-se o \"setFundoCabecalho\" que fará com que a parte de\n     cima da página (o header) fique preto ou transparente, e assim não interrompa a busca dos filmes pela lista */\n  useEffect(()=>{\n    const scrollCheck = () => {\n      if(window.scrollY > 10) {\n        setFundoCabecalho(true);\n      } else {\n        setFundoCabecalho(false);\n      }\n    }\n    window.addEventListener('scroll', scrollCheck);\n    return () => {\n    window.removeEventListener('scroll', scrollCheck);\n    }\n  }, []);\n\n  \n/* Montagem da página, disposição dos elementos, cabeçalho, o filme destaque, as listas dos filmes, o \n   rodapé da página e a função de carregar (loading) antes de abrir a página */\n  return (\n    <div className=\"page\">\n\n      <Cabecalho fundo={fundoCabecalho}/>\n\n      {dadosDestaque &&\n        <FilmeDestaque item={dadosDestaque} />\n      }\n\n      <section className=\"listas\">\n        {listaFilme.map((item, key)=>(\n          <Linhadefilme key={key} title={item.titulo} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">💖</span> por Jean e Nicolas<br/>\n        Direitos de imagem para Netflix<br/>\n        API utilizada do site Themoviedb.org\n      </footer>\n\n      {listaFilme.length <= 0 &&\n      <div className=\"carregando\">\n        <img src=\"https://motamachado.com.br/wp-content/themes/motamachado/assets/images/carregando.gif\" alt=\"Carregando\"/>\n      </div>\n      }\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}